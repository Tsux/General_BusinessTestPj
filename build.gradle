def properties = new Properties()
file("src/test/resources/system.properties").withInputStream { properties.load(it) }

apply plugin: "java"
apply plugin: "maven"
apply plugin: "eclipse"

group = "myorg"
version = 1.0

repositories {
    //mavenCentral()--No tenemos acceso a los repositorios Maven debido a configuraciones de proxy
    				// de modo que usé directorios locales para cargar las librerías del proyecto
    flatDir{
    	dirs 'libs\\SeleniumUtils\\'
    }
    flatDir{
    	dirs 'libs\\CoreLibraries\\'
    }
    flatDir{
    	dirs 'libs\\iText\\'
    }
    //NOTA: Se recomienda obtener el servicio de repositorios privados que ofrece Maven
}

/*sourceSets.all { set ->
    def jarTask = task("${setmoz.name}Jar", type: Jar) {
        baseName = baseName + "-$set.name"
        from set.output
    }

    artifacts {
        archives jarTask
    }
}*/

sourceSets {
    api
    impl
}

dependencies {
    apiCompile 'commons-codec:commons-codec:1.10'

    implCompile sourceSets.api.output
    implCompile 'commons-lang3:commons-lang3:3.4'
    implCompile 'hamcrest-core:hamcrest-core:1.3'
    implCompile 'hamcrest-library:hamcrest-library:1.3'
    
    testCompile 'org.testng:testng:6.8.5'
    testCompile 'org.seleniumhq.selenium:selenium-api:2.47.1'
    testCompile 'org.seleniumhq.selenium:selenium-remote-driver:2.47.1'
    
    testCompile 'org.seleniumhq.selenium.grid:selenium-grid-hub:1.0.5'
	testCompile 'org.seleniumhq.selenium.grid:selenium-grid-remote-control:1.0.5'
	testCompile 'org.seleniumhq.selenium.grid:selenium-grid-tools:1.0.5'
	testCompile 'org.openqa.selenium.support:selenium-support:2.47.1'
    
    testCompile 'junit-addons:junit-addons:1.4'
	testCompile 'org.testng:testng:6.8.5'
	
    testCompile(
    	[group: 'junit', name: 'junit', version: '4.12'],
    	[group: 'log4j', name: 'log4j', version: '1.2.16'],
    	[group: 'guava', name: 'guava', version: '18.0'],
    	[group: 'com.google.code.gson', name: 'gson', version: '2.3.1'],
    	[group: 'commons-io', name: 'commons-io', version: '2.4'],
    	[group: 'commons-codec', name: 'commons-codec', version: '1.10'],
    	[group: 'cglib', name: 'cglib-nodep', version: '2.1_3'],
    	[group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version:'2.47.1'],
    	[group: 'com.beust', name: 'jcommander', version: '1.29'],
    	[group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.4.1'],
    	[group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.1'],
    	[group: 'commons-logging', name: 'commons-logging', version: '1.1.3'],
    	[group: 'org.apache.poi', name: 'poi', version: '3.7'],
    	[group: 'com.itextpdf', name: 'itextpdf', version: '5.5.3'],
    	[group: 'com.itextpdf', name: 'itext-xtra', version: '5.5.3']
     )
    
    testCompile sourceSets.api.output
    testCompile sourceSets.impl.output
    runtime configurations.apiRuntime
    runtime configurations.implRuntime
}

jar {
    from sourceSets.api.output
    from sourceSets.impl.output
}



test {
	systemProperties = properties
	
	useTestNG {
		if (System.getProperty('DEBUG', 'false') == 'true') {
			jvmArgs '-Xdebug',
			'-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009'
		}
		
		useDefaultListeners = true
		// You can run only one test, if you like.
		// Example: gradle clean build -Donly=TestSplitCharges
		def only = System.getProperty('only')
		
		//To run only Regression: gradle test -DonlyR=true 
		def onlyR = System.getProperty('onlyR')
		
		def onlyS = System.getProperty('onlyS')
		
		if(only){
			println "\t=================Running Individual Test!==================\n"
			
			def suiteFiscalIndividualExec = new XmlParser().parse(new File('src/test/resources/testng/testngWebdriverFiscalInd.xml'))
			suiteFiscalIndividualExec.children().findAll{ it.@name != only }.each{ suiteFiscalIndividualExec.remove(it) }
			
			def suiteDexOperIndividualExec = new XmlParser().parse(new File('src/test/resources/testng/testngWebdriverDexOperInd.xml'))
			suiteDexOperIndividualExec.children().findAll{ it.@name != only }.each{ suiteDexOperIndividualExec.remove(it) }
			
			def suiteSegSwitchIndividualExec = new XmlParser().parse(new File('src/test/resources/testng/testngWebDriverSeguridadSwitchInd.xml'))
			suiteSegSwitchIndividualExec.children().findAll{ it.@name != only }.each{ suiteSegSwitchIndividualExec.remove(it) }
			
			if(!suiteFiscalIndividualExec.children().isEmpty()) {
				println "Running Fiscal Test"
				new File('src/test/resources/testng/temp.xml').withPrintWriter { new XmlNodePrinter(it).print(suiteFiscalIndividualExec) }
				suites 'src/test/resources/testng/temp.xml'
			} else if(!suiteDexOperIndividualExec.children().isEmpty()) {
				println "Running DEX Test"
				new File('src/test/resources/testng/temp.xml').withPrintWriter { new XmlNodePrinter(it).print(suiteDexOperIndividualExec) }
				suites 'src/test/resources/testng/temp.xml'
			} else if(!suiteSegSwitchIndividualExec.children().isEmpty()){
				println "Running WebSeguridad from Swicth Tests"
				new File('src/test/resources/testng/temp.xml').withPrintWriter { new XmlNodePrinter(it).print(suiteSegSwitchIndividualExec) }
				suites 'src/test/resources/testng/temp.xml'
			} else {
				println "\t========================Warning!!!========================="
				println "\tExecution will terminate now. No Test Case will be executed"
				println "\tPlease, make sure you are introducing an existing Test Case"
				suites 'src/test/resources/testng/NoTest.xml'
				println ""
			} 
		} else if(onlyR){
			println "\t=================Running Regression Tests!=================\n"
			
			suites 'src/test/resources/testng/testngFiscalRegression.xml'
			
		} else if(onlyS){
			println "\t=================Running Single Test Suite!================\n"
		
			println "Running Suite "+onlyS

			suites 'src/test/resources/testng/'+onlyS+'.xml'
		} else{
			println "\t====================Running all Tests!=====================\n"

			//-------------------------------------Regression Tests------------------------------------
			//will load Fiscal Regression Tests
			suites 'src/test/resources/testng/testngFiscalRegression.xml'
			//-----------------------------------------------------------------------------------------
			
			// -----------------Start of Modularizing the Web driver tests ----------------------------
			//will load 'Web Driver Fiscal Individual Tests'
			suites 'src/test/resources/testng/testngWebdriverFiscalInd.xml'
			//will load 'Web Driver DEX Individual Tests'
			suites 'src/test/resources/testng/testngWebdriverDexOperInd.xml'
			
			// -----------------------End of Modularizing the Web driver test -------------------------
		}
	}
	
	reports {
		html.enabled = false
	}
	
	options {
		listeners << 'org.ektqa.commons.TestNGCustom'
	}
}

/*
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri("${buildDir}/repo"))

            addFilter("main") { artifact, file -> artifact.name == project.name }
            ["api", "impl"].each { type ->
                addFilter(type) { artifact, file -> artifact.name.endsWith("-$type") }
                
                // We now have to map our configurations to the correct maven scope for each pom
                ["compile", "runtime"].each { scope ->
                    configuration = configurations[type + scope.capitalize()]
                    ["main", type].each { pomName ->
                        pom(pomName).scopeMappings.addMapping 1, configuration, scope
                    }
                }
            }

        }
    }
}*/